int kill(int pid) {
  struct proc *p;

  acquire(&ptable.lock);
  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
    if (p->pid == pid) {
      
      // Kill original process/thread.
      p->killed = 1;

      if(p->tgid==p->pid){
        // Is process
        // Kill all threads in the group
        struct proc *p1;
        for (p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++) {
          if (p1->tgid == p->pid && p1!=p) {
            // If thread, and not the original process itself, kill.
            p1->killed = 1;
          }
          // Process has to be scheduled to exit from p->killed=1, hence
          // changing state to RUNNABLE if SLEEPING
          if (p1->state == SLEEPING) p1->state = RUNNABLE;
        }
      }
      // For both processes and threads, they have to be scheduled to exit 
      // from p->killed=1, hence changing state to RUNNABLE if SLEEPING

      if (p->state == SLEEPING) p->state = RUNNABLE;
      release(&ptable.lock);
      return 0;
    }
  }
  release(&ptable.lock);
  return -1;
}

int wait(void) {
  struct proc *p;
  int havekids, pid;
  struct proc *curproc = myproc();

  if(curproc->pid!=curproc->tgid){

    // Is thread, do nothing

    return -1;
  }

  acquire(&ptable.lock);
  for (;;) {
    // Scan through table looking for exited children.
    havekids = 0;
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
      
      // For child threads, do nothing. Reaping is handled by join.
      if (p->parent != curproc || p->tgid != p->pid)
        continue;
      
      // Is child process, and not child thread.
      havekids = 1;
      if (p->state == ZOMBIE) {
        // Found one child process that has exited.
        if(p->thread_count!=1){
          panic("thread count of exited process not 1");
        }
        // Free the PCB
        pid = p->pid;
        kfree(p->kstack);
        p->kstack = 0;
        freevm(p->pgdir);
        p->pid = 0;
        p->parent = 0;
        p->name[0] = 0;
        p->killed = 0;
        p->state = UNUSED;
        p->user_stack = 0;
        p->thread_count = 0;
        p->tgid = 0;
        release(&ptable.lock);
        return pid;
      }
    }

    // No point waiting if we don't have any children.
    if (!havekids || curproc->killed) {
      release(&ptable.lock);
      return -1;
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(curproc, &ptable.lock);  // DOC: wait-sleep
  }
}

void exit(void) {
  struct proc *curproc = myproc();
  struct proc *p;
  int fd;

  if (curproc == initproc) panic("init exiting");

  // Close all open files.
  for (fd = 0; fd < NOFILE; fd++) {
    if (curproc->ofile[fd]) {
      fileclose(curproc->ofile[fd]);
      curproc->ofile[fd] = 0;
    }
  }

  begin_op();
  iput(curproc->cwd);
  end_op();
  curproc->cwd = 0;

  acquire(&ptable.lock);

  // Parent might be sleeping in wait().
  wakeup1(curproc->parent);

  // If thread, set state as ZOMBIE and decrement thread count of parent

  // If parent of threads, ensure that children are all ZOMBIES, reap the children threads,
  // and set own state to ZOMBIE
  
  // If parent of other processes, pass abandoned children to init.
  
  // If parent of threads and other processes, deal with each case as above.
  if(curproc->pid == curproc->tgid){
    // Is process
    int thread_count=0;
    
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
      if (p->parent == curproc) {
        // p is child process or child thread of curproc
        if (p->tgid == curproc->pid) {
          // p is child thread
          if(p->state != ZOMBIE){
            p->state = ZOMBIE;
            curproc->thread_count -= 1;
          }
          thread_count++;
        }else{
          
          // p is child process
          p->parent=initproc; // Pass abandoned child to init
          if (p->state == ZOMBIE) wakeup1(initproc);
        }
      }
    }

    for(int i=0;i<thread_count;i++){
      join();
    }
  }else{
    // If thread, decrementing count of parent
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
      if (curproc->parent == p) {
        // p is child process or child thread of curproc
        p->thread_count--;
      }
    }
  }

  // Jump into the scheduler, never to return.
  curproc->state = ZOMBIE;
  
  // Invariant - When exiting a thread should have no child threads.
  if(curproc->thread_count!=1){
    panic("thread count not 1 when exiting");
  }
  sched();
  panic("zombie exit");
}